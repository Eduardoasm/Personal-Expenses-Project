import type { NextPage } from 'next'
import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'
import conectarDB from '../utils/connectDb'
import User from '../models/models'
import { UserModel } from '../models/models'
import type { NextApiRequest, NextApiResponse } from 'next'
import { useState } from "react"
import type { FormEvent, ChangeEventHandler } from "react"
import axios from 'axios'
import { useRouter } from 'next/router'
import  Swal from 'sweetalert2'


const Home: NextPage = () => {

  const router = useRouter()

  interface error{
    response: number
  }
  interface User{
    email: string;
    password: string
  }

  const [inputChange, setInputChange] = useState<User>({
    email: "",
    password: ""
  })

  const handleChange: ChangeEventHandler<HTMLInputElement> = (e) => {
    e.preventDefault();
    setInputChange({...inputChange, [e.currentTarget.name]: e.currentTarget.value})
    // console.log(inputChange)
    // change(valueName, value)
  }

  const onSubmit = async (e: FormEvent<HTMLFormElement>) => {
    e.preventDefault()
  //   try {
  //     if(!inputChange.email.length){
  //       return alert("please insert email")
  //    }
  //  } catch (error) {
  //   console.log(error)
  // }
  try {
    const response = await axios.post("/api/auth/loginUser", inputChange)
    console.log("soy response", response.status)
    if(response.status === 200){
      // return router.push("/dashboard")
      }
      
      if(response.status === 403){
        return Swal.fire({
          title: '<strong>No email created</strong>',
          icon: 'info',
          html:
            'You can create <b>account</b>, ',
          showCloseButton: true,
          showCancelButton: false,
          focusConfirm: false,
          confirmButtonText:
            'Create account here' +
            router.push("/register"),
          confirmButtonAriaLabel: 'Thumbs up, great!',
          cancelButtonText:
            '<i class="fa fa-thumbs-down"></i>',
            cancelButtonAriaLabel: 'Thumbs down'
          })
      }
    } catch (error) {
      if(error){
          Swal.fire({
          title: '<strong>No email created</strong>',
          icon: 'info',
          html:
            'You can create <b>account</b>, ',
          showCloseButton: true,
          showCancelButton: false,
          focusConfirm: false,
          confirmButtonText:
            'Create account here',
          confirmButtonAriaLabel: router.push("/register"),
          cancelButtonText:
            '<i class="fa fa-thumbs-down"></i>',
            cancelButtonAriaLabel: 'Thumbs down'
          })
        }
        console.log("soy error", error)
      }
    }
  

  const onRegister = (e: FormEvent<HTMLButtonElement>) => {
    e.preventDefault;
    console.log("hola")
    return router.push("/register")
  }


  return (
    <div className={styles.main}>
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className={styles.containerForm}>
      <div className={styles.form}>
      <form 
      className={styles.form1}
      onSubmit = {(e) => onSubmit(e)}>
        <label 
        className={styles.labelsStyles}>
          Email
        </label>
        <input 
        className={styles.inputForm}
        placeholder="Email"
        type="email"
        name="email"
        value={inputChange.email}
        onChange={handleChange}
        />
        <label className={styles.labelsStyles}>
          Password
        </label>
        <input 
        className={styles.inputForm}
        placeholder="Password"
        type="password"
        name="password"
        onChange={handleChange}
        />
        <button 
        className={styles.button}>
          login
        </button>
      </form>
        <span className={styles.spanCreate}>Dont have account?</span>
        <button 
        className={styles.button1}
        onClick={(e) => onRegister(e)}>
          Register
        </button>
        </div>
      </div>
    </div>
    </div>
  )
}


export default Home


export async function getServerSideProps(req: NextApiRequest,res: NextApiResponse) {

  try {
    await conectarDB();
    
    // const { params } = req
    // const userM = await User.findOne({email: req.body.email})

    // console.log(userM)
    // const res: UserModel = await User.find({});
    // const res: typeOf User = await User.find({})

    // const user = res.map((doc) => {
    //   const user = doc.toObject();
    //   user._id = `${user._id}`;
    //   return user;
    // });

    // console.log(res)
    return {props: {user : 123}}
    // return { props: { user } };
  } catch (error) {
    console.log(error);
  }
}